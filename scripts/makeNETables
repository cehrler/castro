#!/usr/bin/perl

use strict;

print "USE castro_db;\n";
print "drop table IF EXISTS spech_NE;\n";
print "drop table IF EXISTS NE;\n";

print "CREATE TABLE speech_NE (SPEECH_ID INT NOT NULL, NE_ID INT NOT NULL, COUNT INT NOT NULL);\n";
#print "CREATE TABLE NE_class (NE_CLASS_ID INT NOT NULL PRIMARY KEY, TYPE VARCHAR(20) NOT NULL, VALUE VARCHAR(100) NOT NULL, INDEX_COL INT NOT NULL);\n";
print "CREATE TABLE NE (NE_ID INT NOT NULL PRIMARY KEY, NE_NAME VARCHAR(100) NOT NULL, NE_TYPE VARCHAR(20) NOT NULL, NE_INDEX_ID INT NOT NULL);\n\n";



sub checkParanthesis {
	my $s = shift;
	$s =~ s/([^\\])"/\1\\"/g;
	$s =~ s/^"/\\"/g;
	return $s;
}

my $NeFile = $ARGV[0];
my $fileList = $ARGV[1];

open(FILE, "<$NeFile") || die "Can't open cor-res file $NeFile";

my %ne = ();

my $currNEClass = "";
my $currNEClassID = -1;
my $currNEID = -1;
my $currNEType = "";
my $currNE;

my $currNE_INDEX_ID;

print "INSERT INTO NE (NE_ID, NE_NAME, NE_TYPE, NE_INDEX_ID) VALUES\n";

while (my $line = <FILE>)
{
	chomp($line);
	$line = checkParanthesis($line);

	if ($line =~ m/^<([^\/].*)>/ && ($line eq "<LOCATIONS>" || $line eq "<PERSONS>" || $line eq "<ORGANIZATIONS>"))
	{
		$currNEType = $1;        
	}
	elsif ($line eq "<TEXT>" || substr($line, 0, 2) eq "</")
	{
		$currNEType = "";
	}
	elsif ($line =~ m/^([0-9]+) (.*)$/ && $currNEType ne "")
	{
		$currNE_INDEX_ID = $1;
		$currNE = $2;
		$currNEID++;		
		$ne{"$currNEType,$currNE"}->{"ID"} = $currNEID;
		$ne{"$currNEType,$currNE"}->{"Type"} = $currNEType;
		$ne{"$currNEType,$currNE"}->{"Value"} = $currNE;
		$ne{"$currNEType,$currNE"}->{"INDEX_ID"} = $currNE_INDEX_ID;
		
		if ($currNEID != 0) { print ",\n"; }

		print "($currNEID, \"$currNE\", \"$currNEType\", $currNE_INDEX_ID)";
	}

}

print ";\n\n";


open(FILELIST, "<$fileList") || die "Can't open filelist $fileList";

my $neName;
my $neCount;
my $file;
my $currSpeechID;

$currNEType = "";

print "INSERT INTO speech_NE (SPEECH_ID, NE_ID, COUNT) VALUES\n";

my $first = 1;
my $speechText = "";
my $ofset = 0;
my $ind = 0;

my @neInFile = ();
my $neObj;

while (my $radek = <FILELIST>)
{
	chomp($radek);
	
	if ($radek =~ m/^([0-9]+) (.*)$/)
	{
		$file = $2;
		$currSpeechID = $1;
	} 
	else
	{
		die "FILELIST: line $radek doesn't match!";
	}
	
	open(FILE, "<../data/$file.nerd") || die "Can't open file: ../data/$file.nerd";
	
	$speechText = `cat ../data/$file.text`;
	$speechText =~ s/\n/<br\/>/g;
	
	@neInFile = ();
	
	while (my $line = <FILE>)
	{
		chomp($line);
		$line = checkParanthesis($line);
		
		if ($line eq "<TEXT>")
		{
			$currNEType = "";
		}
		elsif ($line =~ m/^<([^\/].+)>$/ && ($line eq "<PERSONS>" || $line eq "<LOCATIONS>" || $line eq "<ORGANIZATIONS>"))
		{
			$currNEType = $1;
		}		
		elsif (substr($line, 0, 2) eq "</")
		{
			$currNEType = "";
			next;
		}
		elsif ($currNEType ne "")
		{
			if ($line =~ m/^(.*) ([0-9]+)$/)
			{
				$neName = $1;
				$neCount = $2;
				
				my $neObj;
				$neObj->{"NE"} = $neName;
				$neObj->{"neType"} = $currNEType;
				push(@neInFile, $neObj);
				
				
				#$speechText =~ s/$neName/<$currNEType>$neName<\/$currNEType>/g;
				
				if (!defined($ne{"$currNEType,$neName"}))
				{
					die "Undefined NE:$currNEType,$neName!!!";
				}
				
				if ($first == 1) { $first = 0; }
				else { print "INSERT INTO speech_NE (SPEECH_ID, NE_ID, COUNT) VALUES "; }
				
				print "($currSpeechID, ".$ne{"$currNEType,$neName"}->{"ID"}.", $neCount);\n";
			}
			else
			{
				die "Line $line doesn't match fileName = $file";
			}
			
		}
	}
	
	@neInFile = reverse sort { length($a->{"NE"}) <=> length($b->{"NE"}) } @neInFile;
	
	foreach my $neKey (@neInFile)
	{
	  #print STDERR $neKey->{"NE"}."\n";
	  $ofset = 0;
	  $neName = $neKey->{"NE"};
	  $currNEType = $neKey->{"neType"};
	  while ( ($ind = index($speechText, $neName, $ofset)) >= 0)
	  {
	    if ($ind == 0 || ($ind + length($neName) + 1) >= length($speechText) || substr($speechText, $ind - 1, length($neName) + 2) =~ m/^\W.*\W$/)
	    {
	      substr($speechText, $ind, length($neName), "<$currNEType>$neName</$currNEType>");
	      $ofset = $ind + length($neName) + 2 * length($currNEType) + 5;
	    }
	    else
	    {
	      $ofset = $ind + 1;
	    }
	  }
  }
  
  #exit(1);
	
	$speechText = checkParanthesis($speechText);
	print "UPDATE speech SET SPEECH_TEXT = \"$speechText\" WHERE SPEECH_ID = $currSpeechID;\n";
	
	close(FILE);
}

print ";";

